// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"git.cie-ips.com/ips/wire-provider/grpc/provider"
	"github.com/RyuChk/ips-map-service/cmd/user-tracking-grpc/internal/handler"
	"github.com/RyuChk/ips-map-service/cmd/user-tracking-grpc/server"
	"github.com/RyuChk/ips-map-service/internal/config"
	"github.com/RyuChk/ips-map-service/internal/di"
	"github.com/RyuChk/ips-map-service/internal/repository/redisCache"
	"github.com/RyuChk/ips-map-service/internal/services/userTrackingService"
	"github.com/google/wire"
)

// Injectors from di.go:

func InitializeContainer() (*Container, func(), error) {
	userTrackingConfig := config.ProvideUserTrackingConfig()
	redisConfig := config.ProvideRedisCacheConfig()
	service, err := rediscache.ProvideCacheService(redisConfig)
	if err != nil {
		return nil, nil, err
	}
	usertrackingserviceService := usertrackingservice.ProvideUserTrackingService(userTrackingConfig, service)
	userTrackingServiceServer := handler.ProvideUserTrackingServer(usertrackingserviceService)
	handlers := &handler.Handlers{
		Presence: userTrackingServiceServer,
	}
	grpcServerCustomizer := server.ProvideGRPCServerCustomizer(handlers)
	grpcServer, cleanup, err := provider.ProvideGRPCServer(grpcServerCustomizer)
	if err != nil {
		return nil, nil, err
	}
	container := &Container{
		server: grpcServer,
	}
	return container, func() {
		cleanup()
	}, nil
}

// di.go:

var BaseBindingSet = wire.NewSet(di.DatabaseSet, di.ConfigSet, di.ProviderSet)

var MainBindingSet = wire.NewSet(
	ProviderSet,
	BaseBindingSet, provider.WireSet, wire.Struct(new(Container), "*"),
)
