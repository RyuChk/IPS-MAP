// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_mapservice is a generated GoMock package.
package mock_mapservice

import (
	context "context"
	reflect "reflect"

	constants "github.com/RyuChk/ips-map-service/internal/constants"
	models "github.com/RyuChk/ips-map-service/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddBuildingInfoToDB mocks base method.
func (m *MockService) AddBuildingInfoToDB(ctx context.Context, body models.Building) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBuildingInfoToDB", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBuildingInfoToDB indicates an expected call of AddBuildingInfoToDB.
func (mr *MockServiceMockRecorder) AddBuildingInfoToDB(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBuildingInfoToDB", reflect.TypeOf((*MockService)(nil).AddBuildingInfoToDB), ctx, body)
}

// AddFloorToDB mocks base method.
func (m *MockService) AddFloorToDB(ctx context.Context, body models.Floor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFloorToDB", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFloorToDB indicates an expected call of AddFloorToDB.
func (mr *MockServiceMockRecorder) AddFloorToDB(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFloorToDB", reflect.TypeOf((*MockService)(nil).AddFloorToDB), ctx, body)
}

// GetBuildingInfo mocks base method.
func (m *MockService) GetBuildingInfo(ctx context.Context, building string, role constants.UserRole) (models.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildingInfo", ctx, building, role)
	ret0, _ := ret[0].(models.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildingInfo indicates an expected call of GetBuildingInfo.
func (mr *MockServiceMockRecorder) GetBuildingInfo(ctx, building, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildingInfo", reflect.TypeOf((*MockService)(nil).GetBuildingInfo), ctx, building, role)
}

// GetBuildingList mocks base method.
func (m *MockService) GetBuildingList(ctx context.Context, admin bool) ([]models.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildingList", ctx, admin)
	ret0, _ := ret[0].([]models.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildingList indicates an expected call of GetBuildingList.
func (mr *MockServiceMockRecorder) GetBuildingList(ctx, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildingList", reflect.TypeOf((*MockService)(nil).GetBuildingList), ctx, admin)
}

// GetFloorDetailFromKey mocks base method.
func (m *MockService) GetFloorDetailFromKey(ctx context.Context, floor int, building string, role constants.UserRole) (models.FloorDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloorDetailFromKey", ctx, floor, building, role)
	ret0, _ := ret[0].(models.FloorDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloorDetailFromKey indicates an expected call of GetFloorDetailFromKey.
func (mr *MockServiceMockRecorder) GetFloorDetailFromKey(ctx, floor, building, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloorDetailFromKey", reflect.TypeOf((*MockService)(nil).GetFloorDetailFromKey), ctx, floor, building, role)
}

// GetFloorListByBuilding mocks base method.
func (m *MockService) GetFloorListByBuilding(ctx context.Context, building string, role constants.UserRole) ([]models.Floor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloorListByBuilding", ctx, building, role)
	ret0, _ := ret[0].([]models.Floor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloorListByBuilding indicates an expected call of GetFloorListByBuilding.
func (mr *MockServiceMockRecorder) GetFloorListByBuilding(ctx, building, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloorListByBuilding", reflect.TypeOf((*MockService)(nil).GetFloorListByBuilding), ctx, building, role)
}

// UpsertFloorDetail mocks base method.
func (m *MockService) UpsertFloorDetail(ctx context.Context, body models.FloorDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertFloorDetail", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFloorDetail indicates an expected call of UpsertFloorDetail.
func (mr *MockServiceMockRecorder) UpsertFloorDetail(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFloorDetail", reflect.TypeOf((*MockService)(nil).UpsertFloorDetail), ctx, body)
}
