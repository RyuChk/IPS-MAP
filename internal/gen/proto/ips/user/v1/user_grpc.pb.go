// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ips/user/v1/user.proto

package userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagerServiceClient is the client API for UserManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerServiceClient interface {
	GetCoordinate(ctx context.Context, in *GetCoordinateRequest, opts ...grpc.CallOption) (*GetCoordinateResponse, error)
	RegisterAp(ctx context.Context, in *RegisterApRequest, opts ...grpc.CallOption) (*RegisterApResponse, error)
}

type userManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerServiceClient(cc grpc.ClientConnInterface) UserManagerServiceClient {
	return &userManagerServiceClient{cc}
}

func (c *userManagerServiceClient) GetCoordinate(ctx context.Context, in *GetCoordinateRequest, opts ...grpc.CallOption) (*GetCoordinateResponse, error) {
	out := new(GetCoordinateResponse)
	err := c.cc.Invoke(ctx, "/ips.user.v1.UserManagerService/GetCoordinate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) RegisterAp(ctx context.Context, in *RegisterApRequest, opts ...grpc.CallOption) (*RegisterApResponse, error) {
	out := new(RegisterApResponse)
	err := c.cc.Invoke(ctx, "/ips.user.v1.UserManagerService/RegisterAp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServiceServer is the server API for UserManagerService service.
// All implementations must embed UnimplementedUserManagerServiceServer
// for forward compatibility
type UserManagerServiceServer interface {
	GetCoordinate(context.Context, *GetCoordinateRequest) (*GetCoordinateResponse, error)
	RegisterAp(context.Context, *RegisterApRequest) (*RegisterApResponse, error)
	mustEmbedUnimplementedUserManagerServiceServer()
}

// UnimplementedUserManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServiceServer struct {
}

func (UnimplementedUserManagerServiceServer) GetCoordinate(context.Context, *GetCoordinateRequest) (*GetCoordinateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoordinate not implemented")
}
func (UnimplementedUserManagerServiceServer) RegisterAp(context.Context, *RegisterApRequest) (*RegisterApResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAp not implemented")
}
func (UnimplementedUserManagerServiceServer) mustEmbedUnimplementedUserManagerServiceServer() {}

// UnsafeUserManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServiceServer will
// result in compilation errors.
type UnsafeUserManagerServiceServer interface {
	mustEmbedUnimplementedUserManagerServiceServer()
}

func RegisterUserManagerServiceServer(s grpc.ServiceRegistrar, srv UserManagerServiceServer) {
	s.RegisterService(&UserManagerService_ServiceDesc, srv)
}

func _UserManagerService_GetCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).GetCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ips.user.v1.UserManagerService/GetCoordinate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).GetCoordinate(ctx, req.(*GetCoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_RegisterAp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterApRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).RegisterAp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ips.user.v1.UserManagerService/RegisterAp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).RegisterAp(ctx, req.(*RegisterApRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagerService_ServiceDesc is the grpc.ServiceDesc for UserManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ips.user.v1.UserManagerService",
	HandlerType: (*UserManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoordinate",
			Handler:    _UserManagerService_GetCoordinate_Handler,
		},
		{
			MethodName: "RegisterAp",
			Handler:    _UserManagerService_RegisterAp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ips/user/v1/user.proto",
}
