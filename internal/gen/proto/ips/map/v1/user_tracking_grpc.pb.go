// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ips/map/v1/user_tracking.proto

package mapv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserTrackingServiceClient is the client API for UserTrackingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserTrackingServiceClient interface {
	AddUpdateOnlineUser(ctx context.Context, in *AddUpdateOnlineUserRequest, opts ...grpc.CallOption) (*AddUpdateOnlineUserResponse, error)
	FetchOnlineUser(ctx context.Context, in *FetchOnlineUserRequest, opts ...grpc.CallOption) (*FetchOnlineUserResponse, error)
}

type userTrackingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserTrackingServiceClient(cc grpc.ClientConnInterface) UserTrackingServiceClient {
	return &userTrackingServiceClient{cc}
}

func (c *userTrackingServiceClient) AddUpdateOnlineUser(ctx context.Context, in *AddUpdateOnlineUserRequest, opts ...grpc.CallOption) (*AddUpdateOnlineUserResponse, error) {
	out := new(AddUpdateOnlineUserResponse)
	err := c.cc.Invoke(ctx, "/ips.map.v1.UserTrackingService/AddUpdateOnlineUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTrackingServiceClient) FetchOnlineUser(ctx context.Context, in *FetchOnlineUserRequest, opts ...grpc.CallOption) (*FetchOnlineUserResponse, error) {
	out := new(FetchOnlineUserResponse)
	err := c.cc.Invoke(ctx, "/ips.map.v1.UserTrackingService/FetchOnlineUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserTrackingServiceServer is the server API for UserTrackingService service.
// All implementations must embed UnimplementedUserTrackingServiceServer
// for forward compatibility
type UserTrackingServiceServer interface {
	AddUpdateOnlineUser(context.Context, *AddUpdateOnlineUserRequest) (*AddUpdateOnlineUserResponse, error)
	FetchOnlineUser(context.Context, *FetchOnlineUserRequest) (*FetchOnlineUserResponse, error)
	mustEmbedUnimplementedUserTrackingServiceServer()
}

// UnimplementedUserTrackingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserTrackingServiceServer struct {
}

func (UnimplementedUserTrackingServiceServer) AddUpdateOnlineUser(context.Context, *AddUpdateOnlineUserRequest) (*AddUpdateOnlineUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUpdateOnlineUser not implemented")
}
func (UnimplementedUserTrackingServiceServer) FetchOnlineUser(context.Context, *FetchOnlineUserRequest) (*FetchOnlineUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOnlineUser not implemented")
}
func (UnimplementedUserTrackingServiceServer) mustEmbedUnimplementedUserTrackingServiceServer() {}

// UnsafeUserTrackingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserTrackingServiceServer will
// result in compilation errors.
type UnsafeUserTrackingServiceServer interface {
	mustEmbedUnimplementedUserTrackingServiceServer()
}

func RegisterUserTrackingServiceServer(s grpc.ServiceRegistrar, srv UserTrackingServiceServer) {
	s.RegisterService(&UserTrackingService_ServiceDesc, srv)
}

func _UserTrackingService_AddUpdateOnlineUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUpdateOnlineUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTrackingServiceServer).AddUpdateOnlineUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ips.map.v1.UserTrackingService/AddUpdateOnlineUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTrackingServiceServer).AddUpdateOnlineUser(ctx, req.(*AddUpdateOnlineUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTrackingService_FetchOnlineUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOnlineUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTrackingServiceServer).FetchOnlineUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ips.map.v1.UserTrackingService/FetchOnlineUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTrackingServiceServer).FetchOnlineUser(ctx, req.(*FetchOnlineUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserTrackingService_ServiceDesc is the grpc.ServiceDesc for UserTrackingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserTrackingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ips.map.v1.UserTrackingService",
	HandlerType: (*UserTrackingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUpdateOnlineUser",
			Handler:    _UserTrackingService_AddUpdateOnlineUser_Handler,
		},
		{
			MethodName: "FetchOnlineUser",
			Handler:    _UserTrackingService_FetchOnlineUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ips/map/v1/user_tracking.proto",
}
